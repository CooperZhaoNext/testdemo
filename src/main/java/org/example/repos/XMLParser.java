package org.example.repos;import com.alibaba.fastjson.JSONObject;import com.alibaba.fastjson.TypeReference;import com.google.common.collect.Lists;import java.io.File;import java.io.IOException;import java.util.List;import java.util.Map;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import javax.xml.transform.OutputKeys;import javax.xml.transform.Transformer;import javax.xml.transform.TransformerFactory;import javax.xml.transform.dom.DOMSource;import javax.xml.transform.stream.StreamResult;import org.apache.commons.io.FileUtils;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.SAXException;public class XMLParser {    public static Element get(Element element, String tagName, String context) {        NodeList nodeList = element.getElementsByTagName(tagName);        if (nodeList == null || nodeList.getLength() == 0) {            return null;        }        for (int s = 0; s < nodeList.getLength(); s++) {            Element element1 = (Element) nodeList.item(s);            if (element1.getTextContent().contains(context)) {                return element1;            }        }        return null;    }    public static Element getElementFromFile(String path) throws ParserConfigurationException, IOException, SAXException {        File xmlFile = new File(path); // 替换为你的XML文件路径        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();        DocumentBuilder builder = factory.newDocumentBuilder();        Document document = builder.parse(xmlFile);        // 获取根元素        Element root = document.getDocumentElement();        return root;    }    public static void dealPomXml(String targetDirectory) throws Exception{//        String targetDirectory = "/Users/cooper.zhao/project/trips/pom.xml";        File xmlFile = new File(targetDirectory); // 替换为你的XML文件路径        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();        DocumentBuilder builder = factory.newDocumentBuilder();        Document document = builder.parse(xmlFile);        // 获取根元素        Element root = document.getDocumentElement();        System.out.println("Root element: " + root.getNodeName());        Element plug = getElementFromFile("pmd.xml");        Node importedNode = document.importNode(plug, true);        // 获取子元素        NodeList childNodes = root.getChildNodes();        for (int i = 0; i < childNodes.getLength(); i++) {            if (childNodes.item(i).getNodeType() == Element.ELEMENT_NODE) {                Element childElement = (Element) childNodes.item(i);                if (childElement.getNodeName().equals("build")) {                    NodeList pluginsNode = childElement.getElementsByTagName("plugins");                    Element plugins = (Element) pluginsNode.item(0);                    NodeList childPlugins = plugins.getChildNodes();                    Element mavenPmdPlugin0 = null;                    for (int s = 0; s < childPlugins.getLength(); s++) {                        if (childPlugins.item(s).getNodeType() == Element.ELEMENT_NODE) {                            Element ch2 = (Element) childPlugins.item(s);                            NodeList nodeList = ch2.getElementsByTagName("artifactId");                            Element mavenPmdPluginCont = (Element) nodeList.item(0);                            if (mavenPmdPluginCont.getTextContent().equals("maven-pmd-plugin")) {                                mavenPmdPlugin0 = ch2;                                break;                            }                        }                    }                    if(mavenPmdPlugin0 != null){                        plugins.replaceChild(importedNode,mavenPmdPlugin0);                    }else {                        plugins.appendChild(importedNode);                    }                }            }        }        TransformerFactory transformerFactory = TransformerFactory.newInstance();        Transformer transformer = transformerFactory.newTransformer();        transformer.setOutputProperty(OutputKeys.INDENT, "false"); // 设置输出格式化        DOMSource source = new DOMSource(document);        StreamResult result = new StreamResult(xmlFile);        transformer.transform(source, result);        System.out.println("XML文件已成功修改！");    }    public static void checkPomXml(String targetDirectory) throws Exception{//        String targetDirectory = "/Users/cooper.zhao/project/trips/pom.xml";        File xmlFile = new File(targetDirectory); // 替换为你的XML文件路径        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();        DocumentBuilder builder = factory.newDocumentBuilder();        Document document = builder.parse(xmlFile);        // 获取根元素        Element root = document.getDocumentElement();        System.out.println("Root element: " + root.getNodeName());        NodeList nodeList0 = root.getElementsByTagName("pluginManagement");        if(nodeList0 == null || nodeList0.getLength() == 0){            System.out.println("wo mei you");            return;        }        Element element = (Element) nodeList0.item(0);        NodeList pluginsNode = element.getElementsByTagName("plugins");        Element plugins = (Element) pluginsNode.item(0);        NodeList childPlugins = plugins.getChildNodes();        for (int s = 0; s < childPlugins.getLength(); s++) {            if (childPlugins.item(s).getNodeType() == Element.ELEMENT_NODE) {                Element ch2 = (Element) childPlugins.item(s);                NodeList nodeList = ch2.getElementsByTagName("artifactId");                Element mavenPmdPluginCont = (Element) nodeList.item(0);                if (mavenPmdPluginCont.getTextContent().equals("maven-pmd-plugin")) {                    System.out.println("wo you "+targetDirectory);                    break;                }            }        }        System.out.println("XML文件已成功修改！");    }    public static void main(String[] args) throws Exception{        List<String> exclude = Lists.newArrayList("BackendService");        String targetDirectory = "/Users/cooper.zhao/project/allrepos/%s/pom.xml";        String result = FileUtils.readFileToString(new File("repos.json"), "UTF-8");        Map<String,String> reposMap = JSONObject.parseObject(result,new TypeReference<Map<String, String>>(){});        for(Map.Entry<String,String> entry:reposMap.entrySet()){            if(exclude.contains(entry.getKey())){                continue;            }            dealPomXml(String.format(targetDirectory,entry.getKey()));        }    }}